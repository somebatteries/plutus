{- 
A single occurrence polymorphic identity function gets inlined by the unconditional inlining
optimization.

let
        idFun :: forall a. a -> a
        idFun x = x
        g :: (Integer -> Integer) -> (Integer -> Integer)
        g y = idFun
    in g idFun 1
-}

(let
  (nonrec)

  (termbind
    (strict)
    (vardecl idFun (all a (type) (fun a a)))
    (abs a (type) (lam x a x))
  )

  (termbind
    (strict)
    (vardecl
      g
      (fun
        (fun (con integer) (con integer)) (fun (con integer) (con integer))
      )
    )
    (lam
      y
      (fun (con integer) (con integer))
      (idFun)
    )
  )
  
  [ [ g { idFun (con integer) } ] (con integer 1) ]
)