{- 
Multiple occurrences of a let binding that is a function application (funApp). It should not get 
inlined by the unconditional inlining optimization. However, the optimization that inlines fully
applied function should TODO
k occurs only once so it gets inline by unconditional inlining.

let 
  appNum :: Integer
  appNum = 4 
  funApp :: Integer -> Integer
  funApp = (\x y -> addInteger x y) appNum
  k :: Integer -> Integer
  k = funApp
in k appNum

-}

(let
    (nonrec)
    
    (termbind (strict) (vardecl appNum (con integer)) (con integer 4))
    
    (termbind
      (strict)
      (vardecl funApp (fun (con integer) (con integer)))
      (lam y (con integer) [ [ (builtin addInteger) appNum ] y ])
    )

    (termbind
      (strict)
      (vardecl k (fun (con integer) (con integer)))
      (funApp)
    )
    
    [ k appNum ]
)
