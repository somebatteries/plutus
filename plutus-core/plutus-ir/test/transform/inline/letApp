(let
    (nonrec)
    (termbind (strict) (vardecl appNum (con integer)) (con integer 4))
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
    )
    (termbind
      (nonstrict)
      (vardecl
        fAdditiveSemigroupInteger
        [ (lam a (type) (fun a (fun a a))) (con integer) ]
      )
      addInteger
    )
    (termbind
      (strict)
      (vardecl
        bad_name
        (all
          a
          (type)
          (fun [ (lam a (type) (fun a (fun a a))) a ] (fun a (fun a a)))
        )
      )
      (abs a (type) (lam v [ (lam a (type) (fun a (fun a a))) a ] v))
    )
    (termbind
      (strict)
      (vardecl funApp (fun (con integer) (con integer)))
      (lam
        eta
        (con integer)
        [
          [ [ { bad_name (con integer) } fAdditiveSemigroupInteger ] appNum ]
          eta
        ]
      )
    )
    [ funApp (con integer 5) ]
)